

  /**
      * 1. 一个参数的可以不带括号直接作用
      * 2. 没有参数的必须带小括号
      * 3. 多条执行语句需花括号包裹
      * 4. 字面量对象的返回需要小括号包括！！！！！！！
      * 5. this强制绑定(定义绑定)，普通函数是用时绑定(apply,call,bind);箭头函数的this不等同于'use strict'模式下的this
      */

      var testArr = [1,2,3,4,5,6];
      //1
      testArr.map( n => ++n); //[2, 3, 4, 5, 6, 7]

      //2
      var tt = () => 55 +99;
      tt(); //结果集：154

      //3
      var ss = (ar1,ar2) => {
         var ar3 = ar1 > ar2 ? ar1 : ar2;
         return ar3 - ar1;
      };
      ss(55,99); //结果集：44

      //4: 若是不用小括号，对象那个花括号会给解析器当做标签解析，返回则是undefined!!;
      var ee = (testKey,testValue) => ({testKey:testValue});
      ee('myName','crper'); //Object {testKey: "crper"}

     /*
      *  箭头函数让`var self = this`这种重新指定this的写法不再出现；
      * 箭头函数内的this强制指向obj;不需要额外的指向和bind这些
      * 最常见需要重新指向this的一般出现在setInterval这些异步执行的函数内;
      * 因为默认内部的指向是指向window,除非函数作为一个对象的value会指向obj;
      */



 <View style={flatListStyles.container}>
        <FlatList
          data={[
            {key: '大护法'},
            {key: '绣春刀II：修罗战场'},
            {key: '神偷奶爸3'},
            {key: '神奇女侠'},
            {key: '摔跤吧，爸爸'},
            {key: '悟空传'},
            {key: '闪光少女'},
          ]}
          renderItem={({item}) => <Text style={flatListStyles.item}>{item.key}</Text>}
        />
      </View>

      ①data接收的数组，需要写成{key:你的数据value}的形式，否则会有黄色的警告！
      ②renderItem绑定数据的时候：renderItem={({item}) => 你的子item的组件}，获取数据调用item.key。


      SectionList
      sections：这个属性同样接收的是一个数组，类似{title: 'L', data: [{key: '李四'}]}，
      title，表示分组标题的名字，
      data，表示这个分组下的数据源，data下的内容跟上边讲FlatList中设置data相同！
      renderItem ：这个属性也是绑定数据到子item组件上的，跟FlatList中renderItem相同。
      renderSectionHeader：对比renderItem，这个属性是设置分组标题的，具体使用和renderItem类似！
      使用：renderSectionHeader={({section}) => 你要展示标题的组件}，获取标题的内容要调用：section.title

        不同的section使用渲染的都是同一个子组件
       <SectionList
                sections={[
                  {title: 'L', data: [{key: '李四'}]},
                  {title: 'W', data: [{key: '王五'}]},
                  {title: 'Z', data: [{key: '赵六'},{key: '张三'}]},
                ]}
                renderItem={({item}) => <Text style={styles.item}>{item.key}</Text>}
                renderSectionHeader={({section}) => <Text style={styles.sectionHeader}>{section.title}</Text>}
       />
       不同的section使用不同的子组件渲染
       <SectionList
         sections={[ // 不同section渲染不同类型的子组件
           {data: [...], key: ..., renderItem: ...},
           {data: [...], key: ..., renderItem: ...},
           {data: [...], key: ..., renderItem: ...},
         ]}
       />